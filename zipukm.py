import os
import asyncio
import pandas as pd
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.filters import Command
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchState(StatesGroup):
    waiting_for_query = State()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
CONTACT_NAME = os.getenv("CONTACT_NAME", "–ö–∏—Ä–∏–ª–ª")
CONTACT_PHONE = os.getenv("CONTACT_PHONE", "+79991234567")
CONTACT_EMAIL = os.getenv("CONTACT_EMAIL", "kirill@example.com")
CONTACT_LOCATION = os.getenv("CONTACT_LOCATION", "–õ—è–º–∏–Ω–æ, –°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª.")

# –¢–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("TOKEN_ZIPUKM")

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü—É—Ç—å –∫ Excel
EXCEL_FILE = "price.xlsx"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
user_current_product = {}

# --- –£–¢–ò–õ–ò–¢–´ ---

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
WELCOME_TEXT = (
    "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ–ª–∏–∫–≤–∏–¥–Ω–æ–π –∏ –±/—É —Ç–µ—Ö–Ω–∏–∫–∏!</b>\n\n"
    "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É, –¥–æ—Å—Ç—É–ø–Ω—É—é:\n"
    "üîß <i>–¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏</i>,\n"
    "üöú <i>–∏–ª–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</i>.\n\n"
    "–í—Å–µ –º–∞—à–∏–Ω—ã ‚Äî –≤ –Ω–∞–ª–∏—á–∏–∏.\n"
    "–ß–∞—Å—Ç—å —Å—Ç–æ–∏—Ç –±–µ–∑ –¥–µ–ª–∞ –¥–∞–≤–Ω–æ ‚Äî –ø–æ—ç—Ç–æ–º—É <b>—Ü–µ–Ω–∞ –ø—Ä–∏—è—Ç–Ω–æ —É–¥–∏–≤–∏—Ç</b>.\n\n"
    "üîç –õ–∏—Å—Ç–∞–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º ‚Äî\n"
    "–Ω–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –≥–æ–¥—É.\n\n"
    "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏,\n"
    "–º–µ—Å—Ç–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ–∫—É–ø–∫–∏.\n\n"
    "üõ† <i>–•–æ—Ä–æ—à–µ–µ –ø—Ä–æ—à–ª–æ–µ ‚Äî –Ω–µ –ø—Ä–∏–≥–æ–≤–æ—Ä.</i>\n"
    "–í–æ–∑—å–º–∏—Ç–µ —Å–≤–æ–π ¬´–£–†–ê–õ¬ª –∏–ª–∏ ¬´–ö–∞–º–∞–∑¬ª –µ—â—ë —Ä–∞–∑!"
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search")
        ],
        [
            InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")
        ]
    ])

# –§—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å ID —Ç–æ–≤–∞—Ä–∞
def get_product_id(product):
    for key in ['id', 'ID', 'Id', 'ID —Ç–æ–≤–∞—Ä–∞', '–ê—Ä—Ç–∏–∫—É–ª']:
        val = product.get(key)
        if val and str(val).strip() not in ("", "nan"):
            return val
    return "unknown"

# –§—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ
def get_photo_paths(product):
    photo_paths = []
    for i in range(1, 4):
        img_col = f"image_{i}"
        img_path_base = product.get(img_col, "")
        if not img_path_base or (isinstance(img_path_base, float) and pd.isna(img_path_base)):
            continue
        img_path_base = str(img_path_base).strip()
        if img_path_base.lower() in ("", "nan"):
            continue

        img_path = None
        if os.path.exists(img_path_base):
            img_path = img_path_base
        else:
            for ext in [".jpg", ".jpeg", ".png", ".webp"]:
                path_with_ext = img_path_base + ext
                if os.path.exists(path_with_ext):
                    img_path = path_with_ext
                    break
        if img_path:
            photo_paths.append(img_path)
    return photo_paths

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
_products_cache = None
_last_modified = None

def load_products():
    global _products_cache, _last_modified
    if not os.path.exists(EXCEL_FILE):
        return []
    current_modified = os.path.getmtime(EXCEL_FILE)
    if _products_cache is not None and _last_modified == current_modified:
        return _products_cache

    try:
        df = pd.read_excel(EXCEL_FILE)
        df.columns = df.columns.str.strip().str.lower()
        df = df.astype(object).fillna("")
        _products_cache = df.to_dict(orient="records")
        _last_modified = current_modified
        return _products_cache
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {e}")
        return []

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞
def create_catalog_page(products, page=0, per_page=7):
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_products = products[start_idx:end_idx]

    buttons = [
        [InlineKeyboardButton(
            text=f"{p['name']} ({p['where']})",
            callback_data=f"product_{get_product_id(p)}"
        )] for p in page_products
    ]

    total_pages = (len(products) + per_page - 1) // per_page
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"catalog_prev_{page}"))
    nav.append(InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main"))
    if page < total_pages - 1:
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"catalog_next_{page}"))
    if nav:
        buttons.append(nav)

    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def set_bot_commands(bot: Bot):
    await bot.set_my_commands([BotCommand(command="/start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")])

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

# /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(WELCOME_TEXT, reply_markup=get_main_menu(), parse_mode="HTML")

# –ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
@dp.callback_query(lambda c: c.data == "catalog")
async def show_catalog(callback: types.CallbackQuery):
    await callback.answer()  # ‚úÖ –°–Ω–∏–º–∞–µ–º "—á–∞—Å—ã"
    products = load_products()
    if not products:
        await callback.message.answer("–¢–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=get_main_menu())
        return

    keyboard = create_catalog_page(products)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
@dp.callback_query(lambda c: c.data.startswith("catalog_prev_") or c.data.startswith("catalog_next_"))
async def handle_catalog_navigation(callback: types.CallbackQuery):
    await callback.answer()  # ‚úÖ
    action = "prev" if "prev" in callback.data else "next"
    current_page = int(callback.data.split("_")[-1])
    page = current_page - 1 if action == "prev" else current_page + 1
    products = load_products()
    keyboard = create_catalog_page(products, page=page)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)

# –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–∞–ª–æ–≥—É
@dp.callback_query(lambda c: c.data == "back_to_catalog")
async def back_to_catalog(callback: types.CallbackQuery):
    await callback.answer()  # ‚úÖ
    products = load_products()
    keyboard = create_catalog_page(products)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)

# –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.answer()  # ‚úÖ
    await callback.message.answer(WELCOME_TEXT, reply_markup=get_main_menu(), parse_mode="HTML")

# –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞ (—Å —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–≥—Ä—É–∑–∫–∏)
@dp.callback_query(lambda c: c.data.startswith("product_"))
async def handle_product_selection(callback: types.CallbackQuery):
    await callback.answer()  # ‚úÖ –°–Ω–∏–º–∞–µ–º "—á–∞—Å—ã"

    try:
        product_id = int(callback.data.split("_")[1])
    except (ValueError, IndexError):
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    products = load_products()
    selected_product = next((p for p in products if str(get_product_id(p)) == str(product_id)), None)
    if not selected_product:
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è "–¥–æ–ø. —Ñ–æ—Ç–æ"
    user_current_product[callback.from_user.id] = selected_product

    # –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
    status_msg = await callback.message.answer("‚è≥ –ú–∏–Ω—É—Ç—É, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

    photo_paths = get_photo_paths(selected_product)
    first_photo_path = photo_paths[0] if photo_paths else None

    text = (
        f"<b>{selected_product['name']}</b>\n"
        f"üìç <b>–ú–µ—Å—Ç–æ:</b> {selected_product.get('where', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìÖ <b>–ì–æ–¥:</b> {selected_product.get('both', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {selected_product.get('cost', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üì¶ <b>–°—Ç–∞—Ç—É—Å:</b> {selected_product.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {selected_product.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
    )

    # –ö–Ω–æ–ø–∫–∏
    buttons = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_catalog")]
    ]
    if len(photo_paths) > 1:
        buttons.insert(0, [InlineKeyboardButton(text="üñº –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ", callback_data="more_photos")])
    buttons.extend([
        [InlineKeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")]
    ])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!)
    if first_photo_path:
        await callback.message.answer_photo(
            photo=types.FSInputFile(first_photo_path),
            caption=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    try:
        await status_msg.delete()
    except:
        pass

# –ü–æ–∫–∞–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
@dp.callback_query(lambda c: c.data == "more_photos")
async def show_more_photos(callback: types.CallbackQuery):
    await callback.answer()  # ‚úÖ –°–Ω–∏–º–∞–µ–º "—á–∞—Å—ã"
    product = user_current_product.get(callback.from_user.id)
    if not product:
        await callback.message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
    status_msg = await callback.message.answer("üñº –ú–∏–Ω—É—Ç—É, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ...")

    photo_paths = get_photo_paths(product)[1:]  # –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
    if not photo_paths:
        await callback.message.answer("–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ.")
        try:
            await status_msg.delete()
        except:
            pass
        return

    album = MediaGroupBuilder()
    for path in photo_paths:
        album.add_photo(media=types.FSInputFile(path))

    try:
        await callback.message.answer_media_group(media=album.build())
    except Exception as e:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.")
        print(f"–û—à–∏–±–∫–∞: {e}")

    try:
        await status_msg.delete()
    except:
        pass

# –°–≤—è–∑–∞—Ç—å—Å—è
@dp.callback_query(lambda c: c.data == "contact")
async def handle_contact(callback: types.CallbackQuery):
    await callback.answer()  # ‚úÖ
    contact_info = (
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</b> {CONTACT_NAME}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href='tel:{CONTACT_PHONE}'>{CONTACT_PHONE}</a>\n"
        # f"‚úâÔ∏è <b>Email:</b> <a href='mailto:{CONTACT_EMAIL}'>{CONTACT_EMAIL}</a>\n"
        f"üìç <b>–ú–µ—Å—Ç–æ:</b> {CONTACT_LOCATION}\n"
        f"üïí <b>–ì—Ä–∞—Ñ–∏–∫:</b> –ü–Ω‚Äì–ü—Ç, 8:30‚Äì17:30"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url="https://t.me/shihaleevka")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await callback.message.answer(contact_info, reply_markup=keyboard, parse_mode="HTML")

# –ü–æ–∏—Å–∫
@dp.callback_query(lambda c: c.data == "search")
async def start_search(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()  # ‚úÖ
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –£–†–ê–õ, 4320, –ö–∞–º–∞–∑):")
    await state.set_state(SearchState.waiting_for_query)

@dp.message(StateFilter(SearchState.waiting_for_query))
async def handle_search_query(message: types.Message, state: FSMContext):
    query = message.text.strip().lower()
    if not query:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return
    products = load_products()
    matches = [
        p for p in products
        if query in p.get('name', '').lower() or
           query in p.get('where', '').lower() or
           query in p.get('status', '').lower()
    ]
    if not matches:
        await message.answer(f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*", reply_markup=get_main_menu(), parse_mode="Markdown")
        await state.clear()
        return
    keyboard = create_catalog_page(matches, per_page=10)
    await message.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", reply_markup=keyboard)
    await state.clear()

# –ó–∞–ø—É—Å–∫
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await set_bot_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())